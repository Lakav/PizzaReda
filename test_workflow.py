"""
Script de d√©monstration du flux complet de commande
Simule: Client commande ‚Üí Admin pr√©pare ‚Üí Admin livre ‚Üí Client re√ßoit
"""

import requests
import json
from time import sleep

API_BASE = 'http://localhost:8000/'

def print_section(title):
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}\n")

def test_full_workflow():
    """Teste le flux complet: commande ‚Üí pr√©paration ‚Üí livraison"""

    print_section("1Ô∏è‚É£  √âTAPE 1: CLIENT CR√âE UNE COMMANDE")

    # Client cr√©e une commande
    order_data = {
        "customer_name": "Jean Dupont",
        "pizzas": [
            {
                "name": "Margherita",
                "size": "medium",
                "toppings": ["tomate", "mozzarella", "basilic"]
            },
            {
                "name": "Reine",
                "size": "large",
                "toppings": ["tomate", "mozzarella", "jambon", "champignons"]
            }
        ],
        "customer_address": {
            "street_number": "22",
            "street": "Rue Alsace-Lorraine",
            "city": "Toulouse",
            "postal_code": "31000"
        }
    }

    try:
        response = requests.post(API_BASE + 'orders', json=order_data, timeout=10)
        response.raise_for_status()
        order = response.json()
        order_id = order['order_id']

        print(f"‚úÖ Commande cr√©√©e avec succ√®s!")
        print(f"   ID: {order_id}")
        print(f"   Client: {order['customer_name']}")
        print(f"   Adresse: {order['customer_address']}")
        print(f"   Pizzas: {len(order['pizzas'])}")
        print(f"   Total: {order['total']}‚Ç¨ (Livraison {'GRATUITE' if order['is_delivery_free'] else order['delivery_fee']+'‚Ç¨'})")
        print(f"   Temps estim√©: {order['estimated_delivery_minutes']} minutes")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return

    # V√©rifier le statut initial
    print_section("2Ô∏è‚É£  V√âRIFICATION DU STATUT INITIAL")

    try:
        response = requests.get(f'{API_BASE}orders/{order_id}/status', timeout=10)
        response.raise_for_status()
        status = response.json()

        print(f"‚úÖ Statut actuel: {status['status_label']}")
        print(f"   Progression: {status['progress_percent']}%")
        print(f"   Cr√©√©e √†: {status['created_at']}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # Admin commence la pr√©paration
    print_section("3Ô∏è‚É£  ADMIN COMMENCE LA PR√âPARATION")

    try:
        response = requests.post(f'{API_BASE}admin/orders/{order_id}/start', timeout=10)
        response.raise_for_status()
        data = response.json()

        print(f"‚úÖ Pr√©paration commenc√©e!")
        print(f"   Nouveau statut: {data['order']['status']}")
        print(f"   Heure de d√©but: {data['order']['started_at']}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # V√©rifier la progression
    print_section("4Ô∏è‚É£  V√âRIFICATION DE LA PROGRESSION (CLIENT)")

    try:
        response = requests.get(f'{API_BASE}orders/{order_id}/status', timeout=10)
        response.raise_for_status()
        status = response.json()

        print(f"‚úÖ Statut actuel: {status['status_label']}")
        print(f"   Progression: {status['progress_percent']}%")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # Admin marque la commande pr√™te
    print_section("5Ô∏è‚É£  ADMIN MARQUE PR√äTE POUR LIVRAISON")

    try:
        response = requests.post(f'{API_BASE}admin/orders/{order_id}/ready', timeout=10)
        response.raise_for_status()
        data = response.json()

        print(f"‚úÖ Pizzas pr√™tes!")
        print(f"   Nouveau statut: {data['order']['status']}")
        print(f"   Heure de fin de pr√©paration: {data['order']['ready_at']}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # Admin envoie en livraison
    print_section("6Ô∏è‚É£  ADMIN ENVOIE EN LIVRAISON")

    try:
        response = requests.post(f'{API_BASE}admin/orders/{order_id}/deliver', timeout=10)
        response.raise_for_status()
        data = response.json()

        print(f"‚úÖ Pizzas en route!")
        print(f"   Nouveau statut: {data['order']['status']}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # Client suit la livraison
    print_section("7Ô∏è‚É£  CLIENT SUIT LA LIVRAISON")

    try:
        response = requests.get(f'{API_BASE}orders/{order_id}/status', timeout=10)
        response.raise_for_status()
        status = response.json()

        print(f"‚úÖ Statut actuel: {status['status_label']}")
        print(f"   Progression: {status['progress_percent']}%")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # Admin confirme la livraison
    print_section("8Ô∏è‚É£  ADMIN CONFIRME LA LIVRAISON")

    try:
        response = requests.post(f'{API_BASE}admin/orders/{order_id}/delivered', timeout=10)
        response.raise_for_status()
        data = response.json()

        print(f"‚úÖ Commande livr√©e!")
        print(f"   Nouveau statut: {data['order']['status']}")
        print(f"   Heure de livraison: {data['order']['delivered_at']}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # V√©rification finale
    print_section("9Ô∏è‚É£  V√âRIFICATION FINALE (CLIENT)")

    try:
        response = requests.get(f'{API_BASE}orders/{order_id}/status', timeout=10)
        response.raise_for_status()
        status = response.json()

        print(f"‚úÖ Statut final: {status['status_label']}")
        print(f"   Progression: {status['progress_percent']}%")
        print(f"   Cr√©√©e √†: {status['created_at']}")
        print(f"   Livr√©e √†: {status['delivered_at']}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    # Dashboard admin
    print_section("üîü DASHBOARD ADMIN FINAL")

    try:
        response = requests.get(f'{API_BASE}admin/orders', timeout=10)
        response.raise_for_status()
        data = response.json()

        print(f"‚úÖ Total de commandes: {data['total_orders']}")
        for status_name, orders in data['orders_by_status'].items():
            print(f"   {status_name}: {len(orders)}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur: {e}")
        return

    print_section("‚ú® FLUX COMPLET TERMIN√â AVEC SUCC√àS ‚ú®")

if __name__ == '__main__':
    print("\n" + "="*60)
    print("  TEST DU FLUX COMPLET DE COMMANDE")
    print("  Assurez-vous que le serveur FastAPI est lanc√©")
    print("  uvicorn main:app --reload")
    print("="*60)

    try:
        # V√©rifier que le serveur est accessible
        response = requests.get(API_BASE, timeout=5)
        if response.status_code == 200:
            test_full_workflow()
        else:
            print(f"\n‚ùå Erreur: Serveur retourne le code {response.status_code}")
    except requests.exceptions.ConnectionError:
        print(f"\n‚ùå Erreur: Impossible de se connecter √† {API_BASE}")
        print("   Lancez le serveur avec: uvicorn main:app --reload")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
